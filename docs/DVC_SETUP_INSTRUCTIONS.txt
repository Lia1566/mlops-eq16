
DVC (Data Version Control) Setup Instructions
==============================================

Step 1: Initialize DVC
----------------------
Run in terminal (in your project root directory):

    cd /Users/lia/Desktop/School/Code/MLOps/Proyecto/Fase1
    dvc init
    git add .dvc/.gitignore .dvc/config
    git commit -m "Initialize DVC"

Step 2: Track All Dataset Versions
-----------------------------------
Navigate to the data directory and add files:

    cd data/processed
    dvc add student_entry_performance_eda.csv
    dvc add student_performance_cleaned.csv
    dvc add student_performance_encoded.csv
    dvc add student_performance_preprocessed.csv
    dvc add student_performance_binary_preprocessed.csv
    dvc add student_performance_train.csv
    dvc add student_performance_test.csv

Step 3: Commit DVC Files to Git
--------------------------------
    git add *.dvc .gitignore
    git commit -m "Track all dataset versions with DVC"

Step 4: Verify DVC Tracking
----------------------------
Check that .dvc files were created:

    ls -la *.dvc

Check DVC status:

    dvc status

Expected output: "Data and pipelines are up to date."

Step 5: (Optional) Configure Remote Storage
--------------------------------------------
For team collaboration, configure a remote storage:

    dvc remote add -d storage <your-remote-path>
    dvc push

Benefits of DVC
===============
Version control for large datasets
Reproducibility of data pipeline
Efficient storage (only metadata in Git)
Easy collaboration with team members
Data integrity verification with MD5 hashes
